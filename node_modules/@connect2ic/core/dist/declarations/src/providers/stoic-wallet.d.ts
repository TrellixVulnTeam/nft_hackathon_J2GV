import { ActorSubclass } from "@dfinity/agent";
import type { IConnector } from "./connectors";
import { IDL } from "@dfinity/candid";
declare class StoicConnector implements IConnector {
    #private;
    get identity(): any;
    get principal(): string | undefined;
    constructor(userConfig?: {});
    init(): Promise<boolean>;
    createActor<Service>(canisterId: string, idlFactory: IDL.InterfaceFactory): Promise<ActorSubclass<Service> | undefined>;
    isConnected(): Promise<boolean>;
    connect(): Promise<boolean>;
    disconnect(): Promise<boolean>;
}
export declare const StoicWallet: {
    connector: typeof StoicConnector;
    icon: {
        light: any;
        dark: any;
    };
    id: string;
    name: string;
};
export {};
