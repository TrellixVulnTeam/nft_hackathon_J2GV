import type { IDL } from "@dfinity/candid";
import type { ActorSubclass, Identity } from "@dfinity/agent";
import { SignerResponseSuccess, TransactionResponseSuccess } from "@astrox/connection/lib/esm/types";
import type { IConnector, IWalletConnector } from "./connectors";
declare class AstroXConnector implements IConnector, IWalletConnector {
    #private;
    get identity(): Identity | undefined;
    get principal(): string | undefined;
    constructor(userConfig?: {});
    init(): Promise<boolean>;
    isConnected(): Promise<boolean>;
    createActor<Service>(canisterId: string, idlFactory: IDL.InterfaceFactory): Promise<ActorSubclass<Service> | undefined>;
    connect(): Promise<boolean>;
    disconnect(): Promise<boolean>;
    address(): {
        principal: string | undefined;
    };
    requestTransfer({ amount, from, to, }: {
        amount: number;
        from: string;
        to: string;
    }): Promise<string | TransactionResponseSuccess | undefined>;
    queryBalance(): Promise<Array<{
        amount: number;
        canisterId: string;
        decimals: number;
        image: string;
        name: string;
        symbol: string;
    }>>;
    signMessage({ message }: {
        message: string;
    }): Promise<SignerResponseSuccess | string | undefined>;
}
export declare const AstroX: {
    connector: typeof AstroXConnector;
    icon: {
        light: any;
        dark: any;
    };
    id: string;
    name: string;
};
export {};
