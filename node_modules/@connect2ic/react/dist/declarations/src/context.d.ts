import React, { PropsWithChildren } from "react";
import type { Interpreter } from "xstate";
import type { RootContext, RootEvent, ProviderOptions } from "@connect2ic/core";
import type { IDL } from "@dfinity/candid";
declare type CanisterMap = {
    [canisterName: string]: {
        canisterId: string;
        idlFactory: IDL.InterfaceFactory;
    };
};
declare const Connect2ICContext: React.Context<{
    connectService: Interpreter<RootContext, any, RootEvent, any, any>;
    dialog: {
        open: () => void;
        close: () => void;
        isOpen: boolean;
    };
    action?: {
        type: string;
        event: RootEvent;
        context: RootContext;
    } | undefined;
    canisters: CanisterMap;
}>;
declare type Props = {
    canisters?: CanisterMap;
    whitelist?: Array<string>;
    host?: string;
    dev?: boolean;
    providers: Array<ProviderOptions>;
    autoConnect?: boolean;
};
declare const Connect2ICProvider: React.FC<PropsWithChildren<Props>>;
export { Connect2ICProvider, Connect2ICContext };
